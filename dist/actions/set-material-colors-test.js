var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { UtilsService } from '../services/utils.service';
import * as _ from 'lodash';
// @ts-ignore
import gsap from "gsap";
const getMaterialColors = (material) => {
    if (material.isMeshNodeMaterial) {
        return Object.keys(material.nodeRGBMap);
    }
    else if (material.isMeshStandardMaterial) {
        return ['color', 'emissive'];
    }
    else {
        return [];
    }
};
const setColors = (app, material, colorProperties) => {
    const colors = getMaterialColors(material);
    colorProperties.forEach(colorProperty => {
        const colorName = Object.keys(colorProperty)[0];
        const color = new v3d.Color(Object.values(colorProperty)[0]);
        color.convertSRGBToLinear();
        const r = color.r;
        const g = color.g;
        const b = color.b;
        if (material.isMeshNodeMaterial) {
            const rgbIdx = material.nodeRGBMap[colorName];
            material.nodeRGB[rgbIdx].x = r;
            material.nodeRGB[rgbIdx].y = g;
            material.nodeRGB[rgbIdx].z = b;
        }
        else {
            material.color.r = r;
            material.color.g = g;
            material.color.b = b;
            material.emissive.r = r;
            material.emissive.g = g;
            material.emissive.b = b;
        }
    });
    material.needsUpdate = true;
    if (material === app.worldMaterial) {
        app.updateEnvironment(material);
    }
};
export const setMaterialColorsTest = (args) => __awaiter(void 0, void 0, void 0, function* () {
    const { actionArguments, apiUrl, app, logic, scene } = args;
    if (!actionArguments || !scene) {
        console.warn(`Action: [setMaterialColorsTest] actionArguments or scene is absent`);
        return;
    }
    let { object3d, material_color } = actionArguments;
    if (!object3d || !material_color) {
        console.warn(`Action: [setMaterialColorsTest] object or material is absent`);
        return;
    }
    const objectEntity = logic.object3ds.find(o => o.id === object3d);
    const colorEntity = logic.materials.find(o => o.id === material_color);
    if (!objectEntity) {
        console.warn(`Action: [setMaterialColorsTest] object with id ${object3d} is not attached to logic`);
        return;
    }
    if (!colorEntity) {
        console.warn(`Action: [setMaterialColorsTest] material with id ${material_color} is not attached to logic`);
        return;
    }
    if (!(colorEntity.data && colorEntity.data.properties && colorEntity.data.properties.length)) {
        console.warn(`Action: [setMaterialColorsTest] material properties is absent`);
        return;
    }
    const colorProperties = colorEntity.data.properties.filter(p => {
        return /.*color.*/gi.test(Object.keys(p)[0]);
    });
    if (!colorProperties.length)
        return;
    const material = yield UtilsService.getMaterialByEntity(scene, app, colorEntity, apiUrl);
    if (!material) {
        // error
        console.warn(`Object with a scene name ${objectEntity.sceneName} cannot be found in the scene and cannot be loaded`);
        return;
    }
    // get all objects of the same type(name) in scene
    let object3ds = [];
    let sceneNameRegexp = new RegExp(`${objectEntity.sceneName}.*`, 'gi');
    scene.traverse(sc => {
        if (sc && sc.material && sc.material.name === colorEntity.sceneName) {
            object3ds = [...object3ds, sc];
        }
    });
    if (!object3ds.length) {
        console.warn(`[setMaterialColors] material ${objectEntity.sceneName} no object3ds found`);
        return;
    }
    object3ds.forEach(obj3d => {
        if (obj3d.material && obj3d.material.name === material.name) {
            const material = obj3d.material.clone();
            if (material.isMeshNodeMaterial) {
                material.nodeRGB = _.cloneDeep(obj3d.material.nodeRGB);
                material.nodeRGBArr = _.cloneDeep(obj3d.material.nodeRGBArr);
                setColors(app, material, colorProperties);
                obj3d.material = material;
            }
            else {
                setColors(app, material, colorProperties);
                obj3d.material = material;
            }
        }
    });
    material.needsUpdate = true;
    if (material === app.worldMaterial) {
        app.updateEnvironment(material);
    }
    let objectSceneName = objectEntity.sceneName;
    let newCameraPosition = scene.getObjectByName(`Camera_Windows_0${objectSceneName.substring(objectSceneName.length - 2)}`).position;
    gsap.to(app.camera.position, Object.assign({ duration: 1 }, newCameraPosition));
    function animate(time) {
        requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);
});
//# sourceMappingURL=data:application/json;base64,